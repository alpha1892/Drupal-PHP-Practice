id: xml_source_users
label: 'Users migration for local XML source'
source:
  # We use the XML data parser plugin.
  constants:
    TITLE_SUFFIX: ' (Imported from local file)'
  plugin: url
  data_fetcher_plugin: file
  data_parser_plugin: xml
  urls: 
    - modules/custom/xml_migration/sources/users.xml
  # The XPath to use to query the desired elements.
  item_selector: /users/user
  # Under 'fields', we list the data items to be imported. The first level keys 
  # are the source field names we want to populate (the names to be used as 
  # sources in the process configuration below. For each field, we're importing,
  # we provide a label (optional - this is for display in migration tools) and
  # an XPath for retrieving that value. This XPath is relative to the elements 
  # retrieved by item_selector.
  fields:
    - name: src_id
      label: 'User ID'
      selector: id
    - name: src_name
      label: 'Username'
      selector: name
    - name: src_email
      label: 'Email ID'
      selector: email
  # Under 'ids', we identify source fields populated above which will uniquely
  # identify each imported item. The 'type' makes sure the migration map table 
  # uses the proper schema type for stored the IDs.
  ids:
    src_id:
      type: integer
  # Constants can be defined
process:
  name: 
    - plugin: machine_name
      source: src_name
    - plugin: make_unique_entity_field
      entity_type: user
      field: name
      postfix: _
  mail: src_email
destination:
  plugin: 'entity:user'
  md5_passwords: true
